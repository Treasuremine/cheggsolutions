import numpy as np
import scipy.special as spe
import scipy.constants as cnts
import matplotlib.pyplot as plt
import matplotlib.cm as cm

# Funcion para calcular factorial n!
factorial = lambda n: np.prod( np.array( [i for i in range(1,n)] ) )

# **************************************
# Funcion de onda del oscilador armonico
# Referencia (2) p. 165 eq. (4.16)
# **************************************
def psi(x, n = 1, f = 0.015, m = cnts.m_e):
omega = 2 * np.pi * f
a = m * omega / cnts.hbar
y = a**0.5 * x
cts = (a / np.pi)**0.25 * 1 / (2**n * factorial(n))**0.5
poly_herm = spe.eval_hermite(n, y)
return cts * poly_herm * np.exp(-y**2 / 2)

# *************************************
# Energia del oscilador armonico para n
# Referencia (2) p. 165 eq. (4.17)
# *************************************
def energia(n = 1, f = 0.015):
omega = 2 * np.pi * f
return cnts.hbar * omega * (n + 0.5)

# ****************************************
# Funcion para graficar la funcion de onda
# del oscilador armonico cuantico n = 0-10
# ****************************************
def orbital(n = 0, f = 0.015, m = cnts.m_e, d = [-0.2, 0.2, 0.0001]):
x = np.arange(d[0], d[1], d[2])
vf = np.vectorize(psi)
y = vf(x, n=n, f=f, m=m)
y2 = vf(x, n=n, f=f, m=m)**2
plt.title("Funcion de onda del oscilador armonico")
plt.plot(x, y, "r--", label="$\Psi$")
plt.plot(x, y2, "b-", label="$\Psi^2$")
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.grid(True)
plt.show()

# ****************************************
# Funcion para graficar la funcion de onda
# del oscilador armonico cuantico en 2
# dimensiones nx, ny = 0, 1, ... 10
# ****************************************
def orbital2D(nx = 1, ny=1, fx = 0.015, fy = 0.015, mx = cnts.m_e,
my = cnts.m_e, d = [-0.15, 0.15, 0.005]):
vf = np.vectorize(psi)
x = np.arange(d[0], d[1], d[2])
y = np.arange(d[0], d[1], d[2])
X, Y = np.meshgrid(x, y)
Z = vf(X, n=nx, f=fx, m=mx) * vf(Y, n=ny, f=fy, m=my)
plt.contourf(x, y, Z, 50, cmap=cm.bone)
plt.show()

# *****************************************
# Funcion para graficar la funcion de onda
# del oscilador armonico cuantico en varios
# niveles n = 3, 4, ... 11
# *****************************************
def orbitalN(n_max = 6, f = 0.015, m = cnts.m_e, d = [-0.2, 0.2, 0.0005]):
vf = np.vectorize(psi)
niveles = [0] * n_max
for i in range(n_max):
x = np.arange(d[0], d[1], d[2])
niveles[i] = vf(x, n=i, f=f, m=m)**2
niveles = np.array(niveles[::-1])
plt.imshow(niveles, cmap=cm.bone)
plt.axis("auto")
plt.axis("off")
plt.show()

calculates the wave function and energy of a quantum harmonic oscillator. The code uses the following libraries: numpy, scipy.special, scipy.constants, and matplotlib. The function psi(x) calculates the wave function of the oscillator for a given value of x and n. The function energia(n) calculates the energy of the oscillator for a given value of n. The function orbital(n) plots the wave function and its square for a given value of n. The function orbital2D(nx, ny) plots the wave function in 2D for a given pair of values nx and ny. 
The quantum harmonic oscillator is a model system in quantum mechanics that is used to describe the behavior of many physical systems such as molecular vibrations or wave functions of electrons in atoms. It is the quantum-mechanical analog of the classical harmonic oscillator. An arbitrary smooth potential can usually be approximated as a harmonic potential at the vicinity of a stable equilibrium point, making it one of the most important model systems in quantum mechanics. The quantum harmonic oscillator has implications far beyond the simple diatomic molecule. It is the foundation for the understanding of complex modes of vibration in larger molecules, the motion of atoms in a solid lattice, and the theory of heat capacity.
To solve the quantum harmonic oscillator problem, one can use Schrödinger's equation for the harmonic oscillator potential. The solution involves changing to dimensionless variables, finding the form of the solution for, multiplying that solution by a polynomial, deriving a recursion relation between the coefficients of the polynomial, showing that the polynomial series must terminate if the solutions are to be normalizable, deriving the energy eigenvalues, and finally deriving the functions that are solutions². An exact solution to the harmonic oscillator problem is not only possible but also relatively easy to compute given the proper tools
Schrödinger's equation is a differential equation that forms the basis of quantum mechanics¹. Essentially a wave equation, it describes the form of the probability waves that govern the motion of small particles and specifies how these waves are altered by external influences³. The equation was developed by Erwin Schrödinger in 1926.

How leapfrog Integration Works

Explanation:
Leapfrog integration is a method of solving differential equations that involves updating the position and velocity at different times. The name comes from the idea that the position and velocity values "leap over" each other as they are updated.                                                            
The advantage of leapfrog integration is that it is symplectic, which means that it conserves the total energy of the system over long time intervals. This is important for physical systems that obey Hamilton's equations, such as the harmonic oscillator.

The basic idea of leapfrog integration is to use the Taylor series expansion of the position and velocity 
functions around a [time point]() t:

To solve this equation numerically, we can use a method called leapfrog integration, which is based on the idea of updating the position and velocity at different times. The algorithm is:

Initialize the position x_0 and velocity v_0 at time t_0
calculate the acceleration

 using the force law.
Update the velocity at half at time step:


Update the velocity at half a time step:
Update the position at a full time step:
 Repeat steps 2-4 for the next time steps, using the previous values of position, velocity, and acceleration.

Here is a possible Python program for the harmonic oscillator using leapfrog integration


# Import numpy and matplotlib
import numpy as np
import matplotlib.pyplot as plt

# Define parameters
m = 1 # mass
k = 1 # spring constant
x0 = 1 # initial position
v0 = 0 # initial velocity
t0 = 0 # initial time
tf = 10 # final time
dt = 0.01 # time step
N = int((tf - t0)/dt) # number of steps

# Create arrays to store position, velocity, acceleration, and time
x = np.zeros(N+1)
v = np.zeros(N+1)
a = np.zeros(N+1)
t = np.zeros(N+1)

# Set initial values
x[0] = x0
v[0] = v0
a[0] = -k*x[0]/m
t[0] = t0

# Loop over time steps
for i in range(N):
    # Update velocity at half a time step
    v[i+1/2] = v[i] + a[i]*dt/2
    # Update position at a full time step
    x[i+1] = x[i] + v[i+1/2]*dt
    # Update acceleration at a full time step
    a[i+1] = -k*x[i+1]/m
    # Update time at a full time step
    t[i+1] = t[i] + dt

# Plot position vs time
plt.plot(t,x)
plt.xlabel("Time")
plt.ylabel("Position")
plt.title("Harmonic Oscillator")
plt.show()
---
class QuantumHarmonicOscillator:
    """
    This models a harmonic oscillator. Parameters used throughout the methods
    are:
    
    nu: The level of the harmonic oscillator
    k: The force constant
    m: The mass
    
    The nomenclature of variable names follows Atkins and de Paula Physical
    Chemistry 8th ed.
    """
    
    def __init__(self, mass, k):
        """
        Setup the values used by all methods in this model.
        
        Parameters
        ----------
        mass: float
            The reduced mass of the system, in kg
        
        k: float
            The force constant, in N/m
        """
        self.hbar = 1.054571817e-34
        self.k = k
        self.mass = mass
        self.omega = sqrt(k / mass)
    
    def hermite(self, nu, gamma):
        """
        Returns the value of the nu-th (nth) Hermite polynomial evaluated on gamma
        
        The nu and gamma notation follows Atkins' Physical Chemistry 8th ed.
        
        Parameters
        ----------
        nu: int
            The nu-th (nth) Hermite polynomial
            
        gamma: float
            The value to calculate with the Hermite polynomial
            
        Returns
        -------
        float
            The value of the nu-th Hermite polynomial evaluated with gamma.
            
        Raises
        ------
        Exception
            Raises an exception if the nth Hermite polynomial is not
            supported.
        """
        if nu == 0:
            return 1
        elif nu == 1:
            return 2 * gamma
        elif nu == 2:
            return 4 * gamma ** 2 - 2
        elif nu == 3:
            return 8 * gamma ** 3 - 12 * gamma
        elif nu == 4:
            return 16 * gamma ** 4 - 48 * gamma ** 2 + 12
        elif nu == 5:
            return 32 * gamma ** 5 - 160 * gamma ** 3 + 120 * gamma
        elif nu == 6:
            return 64 * gamma ** 6 - 480 * gamma ** 4 + 720 * gamma ** 2 - 120
        else:
            raise Exception(f'Hermite polynomial {n} is not supported')
            
    def max_nu(self):
        """
        Returns
        -------
        int
            The maximum nu value for the instance.
        """
        return 6
    
    def energy(self, nu):
        """
        Calculate the energy at the given level nu of the system
        
        Parameters
        ----------
        nu: int
            The quantum number nu for the energy level of this system
            
        Returns
        -------
        float
            Energy of the system in Joules.
        """
        return (nu + 0.5) * self.hbar * self.omega
    
    def energy_separation(self):
        """
        Returns
        -------
        float
            The energy difference between adjacent energy levels in Joules.
        """
        return self.hbar * self.omega
    
    def wavefunction(self, nu, x):
        """
        Returns the value of the wavefunction at energy level nu
        at coordinate x.
        
        Parameters
        ----------
        nu: float
            Energy level of the system.
            
        x: float
            x coordinate of the particle in m.
            
        Returns
        -------
        float
            Value of the wavefunction nu at x.
        """
        alpha = (self.hbar ** 2 / self.mass / self.k) ** 0.25
        gamma = x / alpha
        normalization = sqrt(1 / (alpha * sqrt(pi) * 2 ** nu * factorial(nu)))
        gaussian = exp((-gamma ** 2) / 2)
        hermite = self.hermite(nu, gamma)
        return normalization * hermite * gaussian
    
    def wavefunction_across_range(self, nu, x_min, x_max, points=100):
        """
        Calculates the wavefunction across a range.
        
        Parameters
        ----------
        nu: int
            The quantum number of the system.
            
        x_min: float
            The minimum x value to calculate.
            
        x_max: float
            The maximum x value to calculate.
            
        points: int
            The number of points across the range
            
        Returns
        -------
        np.array, list
            The first array are the x coordinates, the second list are the
            float values of the wavefunction.
        """
        xs = np.linspace(x_min, x_max, points)
        ys = [self.wavefunction(nu, x) for x in xs]
        return xs, ys
    
    def prob_density(self, nu, x_min, x_max, points=100):
        """
        Returns the probability density between x_min and x_max for a given
        number of points at energy level nu.
        
        Parameters
        ----------
        nu: int
            Quantum number of the system.
            
        x_min: float
            Minimum of length being calculated. Probably negative. Units are
            meters.
            
        x_max: float
            Maximum of length being calculated. Probably positive. Units are
            meters.
            
        points: int
            The number of points to compute the probability density for
            
        Returns
        -------
        np.array, list
            The first array is the list of x coordinates. The list are the
            corresponding values of the probability density.
        """
        xs = np.linspace(x_min, x_max, points)
        ys = [self.wavefunction(nu, x) ** 2 for x in xs]
        return xs, ys
    
    def integrate_prob_density_between_limits(self, nu, x_min, x_max):
        """
        As a way of testing the methods in this class, provide a way to
        integrate across the wavefunction squared between limits.
        
        Parameters
        ----------
        nu: int
            Quantum number of the system.
            
        x_min: float
            lower bound of integration
            
        x_max: float
            upper bound of integration
        """
        def integrand(x):
            return self.wavefunction(nu, x) ** 2
        result, _ = quad(integrand, x_min, x_max)
        return result
Python: Plotting
k = 516.3
mass = 1.7e-27
x_min = -0.5e-10
x_max = 0.5e-10
points = 1000
qho = QuantumHarmonicOscillator(k=k, mass=mass)
nus = range(qho.max_nu() + 1)
fig, axs = plt.subplots(nrows=len(nus), ncols=2, figsize=(10, len(nus) * 5), sharex=True)
for idx, nu in enumerate(nus):
    xs_wavefunction, ys_wavefunction = qho.wavefunction_across_range(nu, x_min, x_max, points)
    xs_prob_density, ys_prob_density = qho.prob_density(nu, x_min, x_max, points)
    integrated = qho.integrate_prob_density_between_limits(nu, x_min, x_max)
    axs[nu, 0].set_title(f'ν={nu}', size=15, color='r')
    axs[nu, 0].set_ylabel(f'Ψ{nu}(x)', size=15, color='b')
    axs[nu, 0].set_xlabel('x', size=15)
    axs[nu, 0].set_xlim(x_min, x_max)
    axs[nu, 1].set_title(f'ν={nu}, ∫Ψ{nu}^2={round(integrated)}', size=15, color='r')
    axs[nu, 1].set_ylabel(f'Ψ{nu}(x)^2', size=15, color='b')
    axs[nu, 1].set_xlabel('x', size=15)
    axs[nu, 1].set_xlim(x_min, x_max)
    axs[nu, 0].plot(xs_wavefunction, ys_wavefunction)
    axs[nu, 1].plot(xs_prob_density, ys_prob_density, color='g')
Python: Energy level calculation
k = 500
mass = 1.7e-27
mol = 6.022e23
qho = QuantumHarmonicOscillator(k=k, mass=mass)
energy_sep_kj_mol = qho.energy_separation() * mol / 1000  # Convert to kJ/mol
print(f'energy sepration between ν and ν+1, {energy_sep_kj_mol} kJ/mol')
zero_point_kj_mol = qho.energy(nu=0) * mol / 1000
print(f'zero-point energy {zero_point_kj_mol} kJ/mol')
first_excitation_thz = (qho.energy(nu=1) - qho.energy(nu=0)) / 6.626e-34 / 1e12
print(f'First excitation energy {first_excitation_thz} THz')
Python: Energy level comparison
delta_energy_sep = (round(energy_sep_kj_mol) / 34.0 - 1) * 100
print(f'delta energy separation {delta_energy_sep}%')
delta_zero_point = (round(zero_point_kj_mol) / 15.0 - 1) * 100
print(f'delta zero point energy {delta_zero_point}%')
delta_first_excitation = (round(first_excitation_thz) / 86.0 - 1) * 100
print(f'delta first excitation {delta_first_excitation}%')
